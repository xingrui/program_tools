/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "recommend_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ad_server {

int _kADSourceValues[] = {
    ADSource::UNKNOWN,
    ADSource::APIOFFER,
    ADSource::MYOFFER
};
const char* _kADSourceNames[] = {
    "UNKNOWN",
    "APIOFFER",
    "MYOFFER"
};
const std::map<int, const char*> _ADSource_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kADSourceValues, _kADSourceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPublisherStatusValues[] = {
    PublisherStatus::UNKNOWN,
    PublisherStatus::ACTIVE,
    PublisherStatus::PENDING,
    PublisherStatus::BLOCKED
};
const char* _kPublisherStatusNames[] = {
    "UNKNOWN",
    "ACTIVE",
    "PENDING",
    "BLOCKED"
};
const std::map<int, const char*> _PublisherStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPublisherStatusValues, _kPublisherStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAppStatusValues[] = {
    AppStatus::UNKNOWN,
    AppStatus::PENDING,
    AppStatus::DISAPPROVED,
    AppStatus::PAUSED,
    AppStatus::RUNNING,
    AppStatus::DELETED
};
const char* _kAppStatusNames[] = {
    "UNKNOWN",
    "PENDING",
    "DISAPPROVED",
    "PAUSED",
    "RUNNING",
    "DELETED"
};
const std::map<int, const char*> _AppStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kAppStatusValues, _kAppStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUnitStatusValues[] = {
    UnitStatus::UNKNOWN,
    UnitStatus::ACTIVE,
    UnitStatus::PAUSED,
    UnitStatus::DELETED
};
const char* _kUnitStatusNames[] = {
    "UNKNOWN",
    "ACTIVE",
    "PAUSED",
    "DELETED"
};
const std::map<int, const char*> _UnitStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kUnitStatusValues, _kUnitStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrientationValues[] = {
    Orientation::UNKNOWN,
    Orientation::VERTICAL,
    Orientation::HORIZONTAL
};
const char* _kOrientationNames[] = {
    "UNKNOWN",
    "VERTICAL",
    "HORIZONTAL"
};
const std::map<int, const char*> _Orientation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrientationValues, _kOrientationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRequestTypeValues[] = {
    RequestType::UNKNOWN,
    RequestType::SDK,
    RequestType::SITE,
    RequestType::OPENAPI_V2,
    RequestType::OLD_SDK,
    RequestType::AGENTAPI,
    RequestType::SITE_OLD,
    RequestType::OPENAPI_V3
};
const char* _kRequestTypeNames[] = {
    "UNKNOWN",
    "SDK",
    "SITE",
    "OPENAPI_V2",
    "OLD_SDK",
    "AGENTAPI",
    "SITE_OLD",
    "OPENAPI_V3"
};
const std::map<int, const char*> _RequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kRequestTypeValues, _kRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDirectMarketValues[] = {
    DirectMarket::UNKNOWN,
    DirectMarket::DIRECT_MARKET_DOWNLOAD_APK,
    DirectMarket::DIRECT_MARKET_NOT_DOWNLOAD_APK
};
const char* _kDirectMarketNames[] = {
    "UNKNOWN",
    "DIRECT_MARKET_DOWNLOAD_APK",
    "DIRECT_MARKET_NOT_DOWNLOAD_APK"
};
const std::map<int, const char*> _DirectMarket_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDirectMarketValues, _kDirectMarketNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCampaignTypeValues[] = {
    CampaignType::UNKNOWN,
    CampaignType::GooglePlay,
    CampaignType::APK,
    CampaignType::OTHER
};
const char* _kCampaignTypeNames[] = {
    "UNKNOWN",
    "GooglePlay",
    "APK",
    "OTHER"
};
const std::map<int, const char*> _CampaignType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCampaignTypeValues, _kCampaignTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlatformValues[] = {
    Platform::UNKNOWN,
    Platform::ANDROID,
    Platform::IOS,
    Platform::SITE,
    Platform::H5_LINK
};
const char* _kPlatformNames[] = {
    "UNKNOWN",
    "ANDROID",
    "IOS",
    "SITE",
    "H5_LINK"
};
const std::map<int, const char*> _Platform_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kPlatformValues, _kPlatformNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCategoryValues[] = {
    Category::UNKNOWN,
    Category::GAME,
    Category::APPLICATION
};
const char* _kCategoryNames[] = {
    "UNKNOWN",
    "GAME",
    "APPLICATION"
};
const std::map<int, const char*> _Category_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCategoryValues, _kCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNetworkTypeValues[] = {
    NetworkType::UNKNOWN,
    NetworkType::NET_2G,
    NetworkType::NET_3G,
    NetworkType::NET_4G,
    NetworkType::NET_WIFI
};
const char* _kNetworkTypeNames[] = {
    "UNKNOWN",
    "NET_2G",
    "NET_3G",
    "NET_4G",
    "NET_WIFI"
};
const std::map<int, const char*> _NetworkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNetworkTypeValues, _kNetworkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPublisherTypeValues[] = {
    PublisherType::UNKNOWN,
    PublisherType::ADN,
    PublisherType::MEDIABUY,
    PublisherType::M
};
const char* _kPublisherTypeNames[] = {
    "UNKNOWN",
    "ADN",
    "MEDIABUY",
    "M"
};
const std::map<int, const char*> _PublisherType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPublisherTypeValues, _kPublisherTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kImageSizeEnumValues[] = {
    ImageSizeEnum::UNKNOWN,
    ImageSizeEnum::SIZE_320x50,
    ImageSizeEnum::SIZE_300x250,
    ImageSizeEnum::SIZE_480x320,
    ImageSizeEnum::SIZE_320x480,
    ImageSizeEnum::SIZE_300x300,
    ImageSizeEnum::SIZE_1200x627
};
const char* _kImageSizeEnumNames[] = {
    "UNKNOWN",
    "SIZE_320x50",
    "SIZE_300x250",
    "SIZE_480x320",
    "SIZE_320x480",
    "SIZE_300x300",
    "SIZE_1200x627"
};
const std::map<int, const char*> _ImageSizeEnum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kImageSizeEnumValues, _kImageSizeEnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kADTypeValues[] = {
    ADType::UNKNOWN,
    ADType::BANNER,
    ADType::INTERSTITIAL,
    ADType::NATIVE
};
const char* _kADTypeNames[] = {
    "UNKNOWN",
    "BANNER",
    "INTERSTITIAL",
    "NATIVE"
};
const std::map<int, const char*> _ADType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kADTypeValues, _kADTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kADTemplateValues[] = {
    ADTemplate::UNKNOWN,
    ADTemplate::SINGLE_PIC,
    ADTemplate::MULTI_ELEMENT
};
const char* _kADTemplateNames[] = {
    "UNKNOWN",
    "SINGLE_PIC",
    "MULTI_ELEMENT"
};
const std::map<int, const char*> _ADTemplate_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kADTemplateValues, _kADTemplateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCampaignTagValues[] = {
    CampaignTag::UNKNOWN,
    CampaignTag::ADMIN,
    CampaignTag::ADVERTISER,
    CampaignTag::M_MYOFFER
};
const char* _kCampaignTagNames[] = {
    "UNKNOWN",
    "ADMIN",
    "ADVERTISER",
    "M_MYOFFER"
};
const std::map<int, const char*> _CampaignTag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCampaignTagValues, _kCampaignTagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorCodeValues[] = {
    ErrorCode::OK,
    ErrorCode::QUERY_MONGO_FAILED,
    ErrorCode::OPEN_API_V3_NO_UNITID,
    ErrorCode::OPEN_API_V3_GET_TEMPLATE_FAILED,
    ErrorCode::NO_UNITID_AND_APPID,
    ErrorCode::AD_SERVER_INTERNAL_ERROR,
    ErrorCode::UNIT_STATUS_NOT_VALID,
    ErrorCode::APP_STATUS_NOT_VALID,
    ErrorCode::PUBLISHER_STATUS_NOT_VALID
};
const char* _kErrorCodeNames[] = {
    "OK",
    "QUERY_MONGO_FAILED",
    "OPEN_API_V3_NO_UNITID",
    "OPEN_API_V3_GET_TEMPLATE_FAILED",
    "NO_UNITID_AND_APPID",
    "AD_SERVER_INTERNAL_ERROR",
    "UNIT_STATUS_NOT_VALID",
    "APP_STATUS_NOT_VALID",
    "PUBLISHER_STATUS_NOT_VALID"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


RunTimeField::~RunTimeField() throw()
{
}


void RunTimeField::__set_numRecalled(const int32_t val)
{
    this->numRecalled = val;
    __isset.numRecalled = true;
}

void RunTimeField::__set_getCampaignIdTime(const int32_t val)
{
    this->getCampaignIdTime = val;
    __isset.getCampaignIdTime = true;
}

void RunTimeField::__set_getCampaignInfoTime(const int32_t val)
{
    this->getCampaignInfoTime = val;
    __isset.getCampaignInfoTime = true;
}

void RunTimeField::__set_rankTime(const int32_t val)
{
    this->rankTime = val;
    __isset.rankTime = true;
}

const char* RunTimeField::ascii_fingerprint = "E3E2F869E2831D70F619B6B13F64FB99";
const uint8_t RunTimeField::binary_fingerprint[16] = {0xE3, 0xE2, 0xF8, 0x69, 0xE2, 0x83, 0x1D, 0x70, 0xF6, 0x19, 0xB6, 0xB1, 0x3F, 0x64, 0xFB, 0x99};

uint32_t RunTimeField::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }

        switch (fid) {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->numRecalled);
                    this->__isset.numRecalled = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->getCampaignIdTime);
                    this->__isset.getCampaignIdTime = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->getCampaignInfoTime);
                    this->__isset.getCampaignInfoTime = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->rankTime);
                    this->__isset.rankTime = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t RunTimeField::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("RunTimeField");

    if (this->__isset.numRecalled) {
        xfer += oprot->writeFieldBegin("numRecalled", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->numRecalled);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.getCampaignIdTime) {
        xfer += oprot->writeFieldBegin("getCampaignIdTime", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->getCampaignIdTime);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.getCampaignInfoTime) {
        xfer += oprot->writeFieldBegin("getCampaignInfoTime", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->getCampaignInfoTime);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.rankTime) {
        xfer += oprot->writeFieldBegin("rankTime", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32(this->rankTime);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(RunTimeField& a, RunTimeField& b)
{
    using ::std::swap;
    swap(a.numRecalled, b.numRecalled);
    swap(a.getCampaignIdTime, b.getCampaignIdTime);
    swap(a.getCampaignInfoTime, b.getCampaignInfoTime);
    swap(a.rankTime, b.rankTime);
    swap(a.__isset, b.__isset);
}

RunTimeField::RunTimeField(const RunTimeField& other0)
{
    numRecalled = other0.numRecalled;
    getCampaignIdTime = other0.getCampaignIdTime;
    getCampaignInfoTime = other0.getCampaignInfoTime;
    rankTime = other0.rankTime;
    __isset = other0.__isset;
}
RunTimeField& RunTimeField::operator=(const RunTimeField& other1)
{
    numRecalled = other1.numRecalled;
    getCampaignIdTime = other1.getCampaignIdTime;
    getCampaignInfoTime = other1.getCampaignInfoTime;
    rankTime = other1.rankTime;
    __isset = other1.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const RunTimeField& obj)
{
    using apache::thrift::to_string;
    out << "RunTimeField(";
    out << "numRecalled=";
    (obj.__isset.numRecalled ? (out << to_string(obj.numRecalled)) : (out << "<null>"));
    out << ", " << "getCampaignIdTime=";
    (obj.__isset.getCampaignIdTime ? (out << to_string(obj.getCampaignIdTime)) : (out << "<null>"));
    out << ", " << "getCampaignInfoTime=";
    (obj.__isset.getCampaignInfoTime ? (out << to_string(obj.getCampaignInfoTime)) : (out << "<null>"));
    out << ", " << "rankTime=";
    (obj.__isset.rankTime ? (out << to_string(obj.rankTime)) : (out << "<null>"));
    out << ")";
    return out;
}


QueryParam::~QueryParam() throw()
{
}


void QueryParam::__set_timestamp(const int64_t val)
{
    this->timestamp = val;
}

void QueryParam::__set_appId(const int64_t val)
{
    this->appId = val;
    __isset.appId = true;
}

void QueryParam::__set_unitId(const int64_t val)
{
    this->unitId = val;
    __isset.unitId = true;
}

void QueryParam::__set_scenario(const std::string& val)
{
    this->scenario = val;
    __isset.scenario = true;
}

void QueryParam::__set_adTypeStr(const std::string& val)
{
    this->adTypeStr = val;
    __isset.adTypeStr = true;
}

void QueryParam::__set_excludeIdSet(const std::set<int64_t>& val)
{
    this->excludeIdSet = val;
    __isset.excludeIdSet = true;
}

void QueryParam::__set_adNum(const int32_t val)
{
    this->adNum = val;
}

void QueryParam::__set_imageSizeId(const ImageSizeEnum::type val)
{
    this->imageSizeId = val;
}

void QueryParam::__set_requestType(const RequestType::type val)
{
    this->requestType = val;
}

void QueryParam::__set_category(const Category::type val)
{
    this->category = val;
}

void QueryParam::__set_platform(const Platform::type val)
{
    this->platform = val;
}

void QueryParam::__set_osVersion(const std::string& val)
{
    this->osVersion = val;
}

void QueryParam::__set_sdkVersion(const std::string& val)
{
    this->sdkVersion = val;
}

void QueryParam::__set_packageName(const std::string& val)
{
    this->packageName = val;
}

void QueryParam::__set_appVersionName(const std::string& val)
{
    this->appVersionName = val;
}

void QueryParam::__set_appVersionCode(const std::string& val)
{
    this->appVersionCode = val;
}

void QueryParam::__set_imei(const std::string& val)
{
    this->imei = val;
}

void QueryParam::__set_mac(const std::string& val)
{
    this->mac = val;
}

void QueryParam::__set_devId(const std::string& val)
{
    this->devId = val;
}

void QueryParam::__set_deviceModel(const std::string& val)
{
    this->deviceModel = val;
}

void QueryParam::__set_screenSize(const std::string& val)
{
    this->screenSize = val;
}

void QueryParam::__set_orientation(const Orientation::type val)
{
    this->orientation = val;
}

void QueryParam::__set_mnc(const std::string& val)
{
    this->mnc = val;
}

void QueryParam::__set_mcc(const std::string& val)
{
    this->mcc = val;
}

void QueryParam::__set_networkType(const NetworkType::type val)
{
    this->networkType = val;
}

void QueryParam::__set_language(const std::string& val)
{
    this->language = val;
}

void QueryParam::__set_ip(const std::string& val)
{
    this->ip = val;
}

void QueryParam::__set_adnServerIp(const std::string& val)
{
    this->adnServerIp = val;
}

void QueryParam::__set_countryCode(const std::string& val)
{
    this->countryCode = val;
}

void QueryParam::__set_DEPRECATED_publisherId(const int64_t val)
{
    this->DEPRECATED_publisherId = val;
    __isset.DEPRECATED_publisherId = true;
}

void QueryParam::__set_DEPRECATED_campaignType(const CampaignType::type val)
{
    this->DEPRECATED_campaignType = val;
    __isset.DEPRECATED_campaignType = true;
}

void QueryParam::__set_DEPRECATED_excludePackageNameSet(const std::set<std::string>& val)
{
    this->DEPRECATED_excludePackageNameSet = val;
    __isset.DEPRECATED_excludePackageNameSet = true;
}

void QueryParam::__set_sessionId(const std::string& val)
{
    this->sessionId = val;
    __isset.sessionId = true;
}

void QueryParam::__set_parentSessionId(const std::string& val)
{
    this->parentSessionId = val;
    __isset.parentSessionId = true;
}

void QueryParam::__set_timezone(const std::string& val)
{
    this->timezone = val;
    __isset.timezone = true;
}

void QueryParam::__set_GP_version(const std::string& val)
{
    this->GP_version = val;
}

void QueryParam::__set_DEPRECATED_adSourceList(const std::vector<ADSource::type>& val)
{
    this->DEPRECATED_adSourceList = val;
    __isset.DEPRECATED_adSourceList = true;
}

void QueryParam::__set_campaignKind(const std::string& val)
{
    this->campaignKind = val;
    __isset.campaignKind = true;
}

void QueryParam::__set_googleAdvertisingId(const std::string& val)
{
    this->googleAdvertisingId = val;
    __isset.googleAdvertisingId = true;
}

void QueryParam::__set_osVersionCode(const int32_t val)
{
    this->osVersionCode = val;
    __isset.osVersionCode = true;
}

void QueryParam::__set_DEPRECATED_publisherType(const PublisherType::type val)
{
    this->DEPRECATED_publisherType = val;
    __isset.DEPRECATED_publisherType = true;
}

void QueryParam::__set_DEPRECATED_excludeAdvertiserIdSet(const std::set<int64_t>& val)
{
    this->DEPRECATED_excludeAdvertiserIdSet = val;
    __isset.DEPRECATED_excludeAdvertiserIdSet = true;
}

void QueryParam::__set_DEPRECATED_whiteCampaignIdSet(const std::set<int64_t>& val)
{
    this->DEPRECATED_whiteCampaignIdSet = val;
    __isset.DEPRECATED_whiteCampaignIdSet = true;
}

void QueryParam::__set_networkId(const int64_t val)
{
    this->networkId = val;
    __isset.networkId = true;
}

void QueryParam::__set_requestId(const std::string& val)
{
    this->requestId = val;
    __isset.requestId = true;
}

void QueryParam::__set_unitSize(const std::string& val)
{
    this->unitSize = val;
    __isset.unitSize = true;
}

void QueryParam::__set_offset(const int32_t val)
{
    this->offset = val;
    __isset.offset = true;
}

void QueryParam::__set_rankerName(const std::string& val)
{
    this->rankerName = val;
    __isset.rankerName = true;
}

const char* QueryParam::ascii_fingerprint = "746108665BD3B6FC3CBB7FA8238D3B4A";
const uint8_t QueryParam::binary_fingerprint[16] = {0x74, 0x61, 0x08, 0x66, 0x5B, 0xD3, 0xB6, 0xFC, 0x3C, 0xBB, 0x7F, 0xA8, 0x23, 0x8D, 0x3B, 0x4A};

uint32_t QueryParam::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    bool isset_timestamp = false;
    bool isset_adNum = false;
    bool isset_imageSizeId = false;
    bool isset_requestType = false;
    bool isset_category = false;
    bool isset_platform = false;
    bool isset_osVersion = false;
    bool isset_sdkVersion = false;
    bool isset_packageName = false;
    bool isset_appVersionName = false;
    bool isset_appVersionCode = false;
    bool isset_imei = false;
    bool isset_mac = false;
    bool isset_devId = false;
    bool isset_deviceModel = false;
    bool isset_screenSize = false;
    bool isset_orientation = false;
    bool isset_mnc = false;
    bool isset_mcc = false;
    bool isset_networkType = false;
    bool isset_language = false;
    bool isset_ip = false;
    bool isset_adnServerIp = false;
    bool isset_countryCode = false;
    bool isset_GP_version = false;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }

        switch (fid) {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->timestamp);
                    isset_timestamp = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->appId);
                    this->__isset.appId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->unitId);
                    this->__isset.unitId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->scenario);
                    this->__isset.scenario = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 5:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->adTypeStr);
                    this->__isset.adTypeStr = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 6:
                if (ftype == ::apache::thrift::protocol::T_SET) {
                    {
                        this->excludeIdSet.clear();
                        uint32_t _size2;
                        ::apache::thrift::protocol::TType _etype5;
                        xfer += iprot->readSetBegin(_etype5, _size2);
                        uint32_t _i6;

                        for (_i6 = 0; _i6 < _size2; ++_i6) {
                            int64_t _elem7;
                            xfer += iprot->readI64(_elem7);
                            this->excludeIdSet.insert(_elem7);
                        }

                        xfer += iprot->readSetEnd();
                    }
                    this->__isset.excludeIdSet = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 7:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->adNum);
                    isset_adNum = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 8:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast8;
                    xfer += iprot->readI32(ecast8);
                    this->imageSizeId = (ImageSizeEnum::type)ecast8;
                    isset_imageSizeId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 9:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast9;
                    xfer += iprot->readI32(ecast9);
                    this->requestType = (RequestType::type)ecast9;
                    isset_requestType = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 10:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast10;
                    xfer += iprot->readI32(ecast10);
                    this->category = (Category::type)ecast10;
                    isset_category = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 11:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast11;
                    xfer += iprot->readI32(ecast11);
                    this->platform = (Platform::type)ecast11;
                    isset_platform = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 12:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->osVersion);
                    isset_osVersion = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 13:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->sdkVersion);
                    isset_sdkVersion = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 14:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->packageName);
                    isset_packageName = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 15:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->appVersionName);
                    isset_appVersionName = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 16:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->appVersionCode);
                    isset_appVersionCode = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 17:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->imei);
                    isset_imei = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 18:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->mac);
                    isset_mac = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 19:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->devId);
                    isset_devId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 20:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->deviceModel);
                    isset_deviceModel = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 21:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->screenSize);
                    isset_screenSize = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 22:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast12;
                    xfer += iprot->readI32(ecast12);
                    this->orientation = (Orientation::type)ecast12;
                    isset_orientation = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 23:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->mnc);
                    isset_mnc = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 24:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->mcc);
                    isset_mcc = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 25:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast13;
                    xfer += iprot->readI32(ecast13);
                    this->networkType = (NetworkType::type)ecast13;
                    isset_networkType = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 26:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->language);
                    isset_language = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 27:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->ip);
                    isset_ip = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 28:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->adnServerIp);
                    isset_adnServerIp = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 29:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->countryCode);
                    isset_countryCode = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 30:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->DEPRECATED_publisherId);
                    this->__isset.DEPRECATED_publisherId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 31:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast14;
                    xfer += iprot->readI32(ecast14);
                    this->DEPRECATED_campaignType = (CampaignType::type)ecast14;
                    this->__isset.DEPRECATED_campaignType = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 32:
                if (ftype == ::apache::thrift::protocol::T_SET) {
                    {
                        this->DEPRECATED_excludePackageNameSet.clear();
                        uint32_t _size15;
                        ::apache::thrift::protocol::TType _etype18;
                        xfer += iprot->readSetBegin(_etype18, _size15);
                        uint32_t _i19;

                        for (_i19 = 0; _i19 < _size15; ++_i19) {
                            std::string _elem20;
                            xfer += iprot->readString(_elem20);
                            this->DEPRECATED_excludePackageNameSet.insert(_elem20);
                        }

                        xfer += iprot->readSetEnd();
                    }
                    this->__isset.DEPRECATED_excludePackageNameSet = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 33:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->sessionId);
                    this->__isset.sessionId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 34:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->parentSessionId);
                    this->__isset.parentSessionId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 35:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->timezone);
                    this->__isset.timezone = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 36:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->GP_version);
                    isset_GP_version = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 37:
                if (ftype == ::apache::thrift::protocol::T_LIST) {
                    {
                        this->DEPRECATED_adSourceList.clear();
                        uint32_t _size21;
                        ::apache::thrift::protocol::TType _etype24;
                        xfer += iprot->readListBegin(_etype24, _size21);
                        this->DEPRECATED_adSourceList.resize(_size21);
                        uint32_t _i25;

                        for (_i25 = 0; _i25 < _size21; ++_i25) {
                            int32_t ecast26;
                            xfer += iprot->readI32(ecast26);
                            this->DEPRECATED_adSourceList[_i25] = (ADSource::type)ecast26;
                        }

                        xfer += iprot->readListEnd();
                    }
                    this->__isset.DEPRECATED_adSourceList = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 38:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->campaignKind);
                    this->__isset.campaignKind = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 39:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->googleAdvertisingId);
                    this->__isset.googleAdvertisingId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 40:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->osVersionCode);
                    this->__isset.osVersionCode = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 41:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast27;
                    xfer += iprot->readI32(ecast27);
                    this->DEPRECATED_publisherType = (PublisherType::type)ecast27;
                    this->__isset.DEPRECATED_publisherType = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 42:
                if (ftype == ::apache::thrift::protocol::T_SET) {
                    {
                        this->DEPRECATED_excludeAdvertiserIdSet.clear();
                        uint32_t _size28;
                        ::apache::thrift::protocol::TType _etype31;
                        xfer += iprot->readSetBegin(_etype31, _size28);
                        uint32_t _i32;

                        for (_i32 = 0; _i32 < _size28; ++_i32) {
                            int64_t _elem33;
                            xfer += iprot->readI64(_elem33);
                            this->DEPRECATED_excludeAdvertiserIdSet.insert(_elem33);
                        }

                        xfer += iprot->readSetEnd();
                    }
                    this->__isset.DEPRECATED_excludeAdvertiserIdSet = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 43:
                if (ftype == ::apache::thrift::protocol::T_SET) {
                    {
                        this->DEPRECATED_whiteCampaignIdSet.clear();
                        uint32_t _size34;
                        ::apache::thrift::protocol::TType _etype37;
                        xfer += iprot->readSetBegin(_etype37, _size34);
                        uint32_t _i38;

                        for (_i38 = 0; _i38 < _size34; ++_i38) {
                            int64_t _elem39;
                            xfer += iprot->readI64(_elem39);
                            this->DEPRECATED_whiteCampaignIdSet.insert(_elem39);
                        }

                        xfer += iprot->readSetEnd();
                    }
                    this->__isset.DEPRECATED_whiteCampaignIdSet = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 44:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->networkId);
                    this->__isset.networkId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 45:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->requestId);
                    this->__isset.requestId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 46:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->unitSize);
                    this->__isset.unitSize = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 47:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    xfer += iprot->readI32(this->offset);
                    this->__isset.offset = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 48:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->rankerName);
                    this->__isset.rankerName = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    JUDGE(timestamp);


    JUDGE(adNum);


    JUDGE(imageSizeId);


    JUDGE(requestType);


    JUDGE(category);


    JUDGE(platform);


    JUDGE(osVersion);


    JUDGE(sdkVersion);


    JUDGE(packageName);


    JUDGE(appVersionName);


    JUDGE(appVersionCode);


    JUDGE(imei);


    JUDGE(mac);


    JUDGE(devId);


    JUDGE(deviceModel);


    JUDGE(screenSize);


    JUDGE(orientation);


    JUDGE(mnc);


    JUDGE(mcc);


    JUDGE(networkType);


    JUDGE(language);


    JUDGE(ip);


    JUDGE(adnServerIp);


    JUDGE(countryCode);


    JUDGE(GP_version);


    return xfer;
}

uint32_t QueryParam::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("QueryParam");

    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.appId) {
        xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_I64, 2);
        xfer += oprot->writeI64(this->appId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.unitId) {
        xfer += oprot->writeFieldBegin("unitId", ::apache::thrift::protocol::T_I64, 3);
        xfer += oprot->writeI64(this->unitId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.scenario) {
        xfer += oprot->writeFieldBegin("scenario", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->scenario);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.adTypeStr) {
        xfer += oprot->writeFieldBegin("adTypeStr", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->adTypeStr);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.excludeIdSet) {
        xfer += oprot->writeFieldBegin("excludeIdSet", ::apache::thrift::protocol::T_SET, 6);
        {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->excludeIdSet.size()));
            std::set<int64_t> ::const_iterator _iter40;

            for (_iter40 = this->excludeIdSet.begin(); _iter40 != this->excludeIdSet.end(); ++_iter40) {
                xfer += oprot->writeI64((*_iter40));
            }

            xfer += oprot->writeSetEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldBegin("adNum", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->adNum);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("imageSizeId", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32((int32_t)this->imageSizeId);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->requestType);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->category);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("platform", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->platform);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("osVersion", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->osVersion);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("sdkVersion", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->sdkVersion);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("packageName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->packageName);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appVersionName", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->appVersionName);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appVersionCode", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->appVersionCode);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("imei", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->imei);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("devId", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->devId);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("deviceModel", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->deviceModel);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("screenSize", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->screenSize);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("orientation", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32((int32_t)this->orientation);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("mnc", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->mnc);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("mcc", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->mcc);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("networkType", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32((int32_t)this->networkType);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 26);
    xfer += oprot->writeString(this->language);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 27);
    xfer += oprot->writeString(this->ip);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("adnServerIp", ::apache::thrift::protocol::T_STRING, 28);
    xfer += oprot->writeString(this->adnServerIp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 29);
    xfer += oprot->writeString(this->countryCode);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.DEPRECATED_publisherId) {
        xfer += oprot->writeFieldBegin("DEPRECATED_publisherId", ::apache::thrift::protocol::T_I64, 30);
        xfer += oprot->writeI64(this->DEPRECATED_publisherId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.DEPRECATED_campaignType) {
        xfer += oprot->writeFieldBegin("DEPRECATED_campaignType", ::apache::thrift::protocol::T_I32, 31);
        xfer += oprot->writeI32((int32_t)this->DEPRECATED_campaignType);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.DEPRECATED_excludePackageNameSet) {
        xfer += oprot->writeFieldBegin("DEPRECATED_excludePackageNameSet", ::apache::thrift::protocol::T_SET, 32);
        {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->DEPRECATED_excludePackageNameSet.size()));
            std::set<std::string> ::const_iterator _iter41;

            for (_iter41 = this->DEPRECATED_excludePackageNameSet.begin(); _iter41 != this->DEPRECATED_excludePackageNameSet.end(); ++_iter41) {
                xfer += oprot->writeString((*_iter41));
            }

            xfer += oprot->writeSetEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.sessionId) {
        xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 33);
        xfer += oprot->writeString(this->sessionId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.parentSessionId) {
        xfer += oprot->writeFieldBegin("parentSessionId", ::apache::thrift::protocol::T_STRING, 34);
        xfer += oprot->writeString(this->parentSessionId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.timezone) {
        xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 35);
        xfer += oprot->writeString(this->timezone);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldBegin("GP_version", ::apache::thrift::protocol::T_STRING, 36);
    xfer += oprot->writeString(this->GP_version);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.DEPRECATED_adSourceList) {
        xfer += oprot->writeFieldBegin("DEPRECATED_adSourceList", ::apache::thrift::protocol::T_LIST, 37);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->DEPRECATED_adSourceList.size()));
            std::vector<ADSource::type> ::const_iterator _iter42;

            for (_iter42 = this->DEPRECATED_adSourceList.begin(); _iter42 != this->DEPRECATED_adSourceList.end(); ++_iter42) {
                xfer += oprot->writeI32((int32_t)(*_iter42));
            }

            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.campaignKind) {
        xfer += oprot->writeFieldBegin("campaignKind", ::apache::thrift::protocol::T_STRING, 38);
        xfer += oprot->writeString(this->campaignKind);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.googleAdvertisingId) {
        xfer += oprot->writeFieldBegin("googleAdvertisingId", ::apache::thrift::protocol::T_STRING, 39);
        xfer += oprot->writeString(this->googleAdvertisingId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.osVersionCode) {
        xfer += oprot->writeFieldBegin("osVersionCode", ::apache::thrift::protocol::T_I32, 40);
        xfer += oprot->writeI32(this->osVersionCode);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.DEPRECATED_publisherType) {
        xfer += oprot->writeFieldBegin("DEPRECATED_publisherType", ::apache::thrift::protocol::T_I32, 41);
        xfer += oprot->writeI32((int32_t)this->DEPRECATED_publisherType);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.DEPRECATED_excludeAdvertiserIdSet) {
        xfer += oprot->writeFieldBegin("DEPRECATED_excludeAdvertiserIdSet", ::apache::thrift::protocol::T_SET, 42);
        {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->DEPRECATED_excludeAdvertiserIdSet.size()));
            std::set<int64_t> ::const_iterator _iter43;

            for (_iter43 = this->DEPRECATED_excludeAdvertiserIdSet.begin(); _iter43 != this->DEPRECATED_excludeAdvertiserIdSet.end(); ++_iter43) {
                xfer += oprot->writeI64((*_iter43));
            }

            xfer += oprot->writeSetEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.DEPRECATED_whiteCampaignIdSet) {
        xfer += oprot->writeFieldBegin("DEPRECATED_whiteCampaignIdSet", ::apache::thrift::protocol::T_SET, 43);
        {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->DEPRECATED_whiteCampaignIdSet.size()));
            std::set<int64_t> ::const_iterator _iter44;

            for (_iter44 = this->DEPRECATED_whiteCampaignIdSet.begin(); _iter44 != this->DEPRECATED_whiteCampaignIdSet.end(); ++_iter44) {
                xfer += oprot->writeI64((*_iter44));
            }

            xfer += oprot->writeSetEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.networkId) {
        xfer += oprot->writeFieldBegin("networkId", ::apache::thrift::protocol::T_I64, 44);
        xfer += oprot->writeI64(this->networkId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.requestId) {
        xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 45);
        xfer += oprot->writeString(this->requestId);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.unitSize) {
        xfer += oprot->writeFieldBegin("unitSize", ::apache::thrift::protocol::T_STRING, 46);
        xfer += oprot->writeString(this->unitSize);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.offset) {
        xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 47);
        xfer += oprot->writeI32(this->offset);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.rankerName) {
        xfer += oprot->writeFieldBegin("rankerName", ::apache::thrift::protocol::T_STRING, 48);
        xfer += oprot->writeString(this->rankerName);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(QueryParam& a, QueryParam& b)
{
    using ::std::swap;
    swap(a.timestamp, b.timestamp);
    swap(a.appId, b.appId);
    swap(a.unitId, b.unitId);
    swap(a.scenario, b.scenario);
    swap(a.adTypeStr, b.adTypeStr);
    swap(a.excludeIdSet, b.excludeIdSet);
    swap(a.adNum, b.adNum);
    swap(a.imageSizeId, b.imageSizeId);
    swap(a.requestType, b.requestType);
    swap(a.category, b.category);
    swap(a.platform, b.platform);
    swap(a.osVersion, b.osVersion);
    swap(a.sdkVersion, b.sdkVersion);
    swap(a.packageName, b.packageName);
    swap(a.appVersionName, b.appVersionName);
    swap(a.appVersionCode, b.appVersionCode);
    swap(a.imei, b.imei);
    swap(a.mac, b.mac);
    swap(a.devId, b.devId);
    swap(a.deviceModel, b.deviceModel);
    swap(a.screenSize, b.screenSize);
    swap(a.orientation, b.orientation);
    swap(a.mnc, b.mnc);
    swap(a.mcc, b.mcc);
    swap(a.networkType, b.networkType);
    swap(a.language, b.language);
    swap(a.ip, b.ip);
    swap(a.adnServerIp, b.adnServerIp);
    swap(a.countryCode, b.countryCode);
    swap(a.DEPRECATED_publisherId, b.DEPRECATED_publisherId);
    swap(a.DEPRECATED_campaignType, b.DEPRECATED_campaignType);
    swap(a.DEPRECATED_excludePackageNameSet, b.DEPRECATED_excludePackageNameSet);
    swap(a.sessionId, b.sessionId);
    swap(a.parentSessionId, b.parentSessionId);
    swap(a.timezone, b.timezone);
    swap(a.GP_version, b.GP_version);
    swap(a.DEPRECATED_adSourceList, b.DEPRECATED_adSourceList);
    swap(a.campaignKind, b.campaignKind);
    swap(a.googleAdvertisingId, b.googleAdvertisingId);
    swap(a.osVersionCode, b.osVersionCode);
    swap(a.DEPRECATED_publisherType, b.DEPRECATED_publisherType);
    swap(a.DEPRECATED_excludeAdvertiserIdSet, b.DEPRECATED_excludeAdvertiserIdSet);
    swap(a.DEPRECATED_whiteCampaignIdSet, b.DEPRECATED_whiteCampaignIdSet);
    swap(a.networkId, b.networkId);
    swap(a.requestId, b.requestId);
    swap(a.unitSize, b.unitSize);
    swap(a.offset, b.offset);
    swap(a.rankerName, b.rankerName);
    swap(a.__isset, b.__isset);
}

QueryParam::QueryParam(const QueryParam& other45)
{
    timestamp = other45.timestamp;
    appId = other45.appId;
    unitId = other45.unitId;
    scenario = other45.scenario;
    adTypeStr = other45.adTypeStr;
    excludeIdSet = other45.excludeIdSet;
    adNum = other45.adNum;
    imageSizeId = other45.imageSizeId;
    requestType = other45.requestType;
    category = other45.category;
    platform = other45.platform;
    osVersion = other45.osVersion;
    sdkVersion = other45.sdkVersion;
    packageName = other45.packageName;
    appVersionName = other45.appVersionName;
    appVersionCode = other45.appVersionCode;
    imei = other45.imei;
    mac = other45.mac;
    devId = other45.devId;
    deviceModel = other45.deviceModel;
    screenSize = other45.screenSize;
    orientation = other45.orientation;
    mnc = other45.mnc;
    mcc = other45.mcc;
    networkType = other45.networkType;
    language = other45.language;
    ip = other45.ip;
    adnServerIp = other45.adnServerIp;
    countryCode = other45.countryCode;
    DEPRECATED_publisherId = other45.DEPRECATED_publisherId;
    DEPRECATED_campaignType = other45.DEPRECATED_campaignType;
    DEPRECATED_excludePackageNameSet = other45.DEPRECATED_excludePackageNameSet;
    sessionId = other45.sessionId;
    parentSessionId = other45.parentSessionId;
    timezone = other45.timezone;
    GP_version = other45.GP_version;
    DEPRECATED_adSourceList = other45.DEPRECATED_adSourceList;
    campaignKind = other45.campaignKind;
    googleAdvertisingId = other45.googleAdvertisingId;
    osVersionCode = other45.osVersionCode;
    DEPRECATED_publisherType = other45.DEPRECATED_publisherType;
    DEPRECATED_excludeAdvertiserIdSet = other45.DEPRECATED_excludeAdvertiserIdSet;
    DEPRECATED_whiteCampaignIdSet = other45.DEPRECATED_whiteCampaignIdSet;
    networkId = other45.networkId;
    requestId = other45.requestId;
    unitSize = other45.unitSize;
    offset = other45.offset;
    rankerName = other45.rankerName;
    __isset = other45.__isset;
}
QueryParam& QueryParam::operator=(const QueryParam& other46)
{
    timestamp = other46.timestamp;
    appId = other46.appId;
    unitId = other46.unitId;
    scenario = other46.scenario;
    adTypeStr = other46.adTypeStr;
    excludeIdSet = other46.excludeIdSet;
    adNum = other46.adNum;
    imageSizeId = other46.imageSizeId;
    requestType = other46.requestType;
    category = other46.category;
    platform = other46.platform;
    osVersion = other46.osVersion;
    sdkVersion = other46.sdkVersion;
    packageName = other46.packageName;
    appVersionName = other46.appVersionName;
    appVersionCode = other46.appVersionCode;
    imei = other46.imei;
    mac = other46.mac;
    devId = other46.devId;
    deviceModel = other46.deviceModel;
    screenSize = other46.screenSize;
    orientation = other46.orientation;
    mnc = other46.mnc;
    mcc = other46.mcc;
    networkType = other46.networkType;
    language = other46.language;
    ip = other46.ip;
    adnServerIp = other46.adnServerIp;
    countryCode = other46.countryCode;
    DEPRECATED_publisherId = other46.DEPRECATED_publisherId;
    DEPRECATED_campaignType = other46.DEPRECATED_campaignType;
    DEPRECATED_excludePackageNameSet = other46.DEPRECATED_excludePackageNameSet;
    sessionId = other46.sessionId;
    parentSessionId = other46.parentSessionId;
    timezone = other46.timezone;
    GP_version = other46.GP_version;
    DEPRECATED_adSourceList = other46.DEPRECATED_adSourceList;
    campaignKind = other46.campaignKind;
    googleAdvertisingId = other46.googleAdvertisingId;
    osVersionCode = other46.osVersionCode;
    DEPRECATED_publisherType = other46.DEPRECATED_publisherType;
    DEPRECATED_excludeAdvertiserIdSet = other46.DEPRECATED_excludeAdvertiserIdSet;
    DEPRECATED_whiteCampaignIdSet = other46.DEPRECATED_whiteCampaignIdSet;
    networkId = other46.networkId;
    requestId = other46.requestId;
    unitSize = other46.unitSize;
    offset = other46.offset;
    rankerName = other46.rankerName;
    __isset = other46.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryParam& obj)
{
    using apache::thrift::to_string;
    out << "QueryParam(";
    out << "timestamp=" << to_string(obj.timestamp);
    out << ", " << "appId=";
    (obj.__isset.appId ? (out << to_string(obj.appId)) : (out << "<null>"));
    out << ", " << "unitId=";
    (obj.__isset.unitId ? (out << to_string(obj.unitId)) : (out << "<null>"));
    out << ", " << "scenario=";
    (obj.__isset.scenario ? (out << to_string(obj.scenario)) : (out << "<null>"));
    out << ", " << "adTypeStr=";
    (obj.__isset.adTypeStr ? (out << to_string(obj.adTypeStr)) : (out << "<null>"));
    out << ", " << "excludeIdSet=";
    (obj.__isset.excludeIdSet ? (out << to_string(obj.excludeIdSet)) : (out << "<null>"));
    out << ", " << "adNum=" << to_string(obj.adNum);
    out << ", " << "imageSizeId=" << to_string(obj.imageSizeId);
    out << ", " << "requestType=" << to_string(obj.requestType);
    out << ", " << "category=" << to_string(obj.category);
    out << ", " << "platform=" << to_string(obj.platform);
    out << ", " << "osVersion=" << to_string(obj.osVersion);
    out << ", " << "sdkVersion=" << to_string(obj.sdkVersion);
    out << ", " << "packageName=" << to_string(obj.packageName);
    out << ", " << "appVersionName=" << to_string(obj.appVersionName);
    out << ", " << "appVersionCode=" << to_string(obj.appVersionCode);
    out << ", " << "imei=" << to_string(obj.imei);
    out << ", " << "mac=" << to_string(obj.mac);
    out << ", " << "devId=" << to_string(obj.devId);
    out << ", " << "deviceModel=" << to_string(obj.deviceModel);
    out << ", " << "screenSize=" << to_string(obj.screenSize);
    out << ", " << "orientation=" << to_string(obj.orientation);
    out << ", " << "mnc=" << to_string(obj.mnc);
    out << ", " << "mcc=" << to_string(obj.mcc);
    out << ", " << "networkType=" << to_string(obj.networkType);
    out << ", " << "language=" << to_string(obj.language);
    out << ", " << "ip=" << to_string(obj.ip);
    out << ", " << "adnServerIp=" << to_string(obj.adnServerIp);
    out << ", " << "countryCode=" << to_string(obj.countryCode);
    out << ", " << "DEPRECATED_publisherId=";
    (obj.__isset.DEPRECATED_publisherId ? (out << to_string(obj.DEPRECATED_publisherId)) : (out << "<null>"));
    out << ", " << "DEPRECATED_campaignType=";
    (obj.__isset.DEPRECATED_campaignType ? (out << to_string(obj.DEPRECATED_campaignType)) : (out << "<null>"));
    out << ", " << "DEPRECATED_excludePackageNameSet=";
    (obj.__isset.DEPRECATED_excludePackageNameSet ? (out << to_string(obj.DEPRECATED_excludePackageNameSet)) : (out << "<null>"));
    out << ", " << "sessionId=";
    (obj.__isset.sessionId ? (out << to_string(obj.sessionId)) : (out << "<null>"));
    out << ", " << "parentSessionId=";
    (obj.__isset.parentSessionId ? (out << to_string(obj.parentSessionId)) : (out << "<null>"));
    out << ", " << "timezone=";
    (obj.__isset.timezone ? (out << to_string(obj.timezone)) : (out << "<null>"));
    out << ", " << "GP_version=" << to_string(obj.GP_version);
    out << ", " << "DEPRECATED_adSourceList=";
    (obj.__isset.DEPRECATED_adSourceList ? (out << to_string(obj.DEPRECATED_adSourceList)) : (out << "<null>"));
    out << ", " << "campaignKind=";
    (obj.__isset.campaignKind ? (out << to_string(obj.campaignKind)) : (out << "<null>"));
    out << ", " << "googleAdvertisingId=";
    (obj.__isset.googleAdvertisingId ? (out << to_string(obj.googleAdvertisingId)) : (out << "<null>"));
    out << ", " << "osVersionCode=";
    (obj.__isset.osVersionCode ? (out << to_string(obj.osVersionCode)) : (out << "<null>"));
    out << ", " << "DEPRECATED_publisherType=";
    (obj.__isset.DEPRECATED_publisherType ? (out << to_string(obj.DEPRECATED_publisherType)) : (out << "<null>"));
    out << ", " << "DEPRECATED_excludeAdvertiserIdSet=";
    (obj.__isset.DEPRECATED_excludeAdvertiserIdSet ? (out << to_string(obj.DEPRECATED_excludeAdvertiserIdSet)) : (out << "<null>"));
    out << ", " << "DEPRECATED_whiteCampaignIdSet=";
    (obj.__isset.DEPRECATED_whiteCampaignIdSet ? (out << to_string(obj.DEPRECATED_whiteCampaignIdSet)) : (out << "<null>"));
    out << ", " << "networkId=";
    (obj.__isset.networkId ? (out << to_string(obj.networkId)) : (out << "<null>"));
    out << ", " << "requestId=";
    (obj.__isset.requestId ? (out << to_string(obj.requestId)) : (out << "<null>"));
    out << ", " << "unitSize=";
    (obj.__isset.unitSize ? (out << to_string(obj.unitSize)) : (out << "<null>"));
    out << ", " << "offset=";
    (obj.__isset.offset ? (out << to_string(obj.offset)) : (out << "<null>"));
    out << ", " << "rankerName=";
    (obj.__isset.rankerName ? (out << to_string(obj.rankerName)) : (out << "<null>"));
    out << ")";
    return out;
}


Campaign::~Campaign() throw()
{
}


void Campaign::__set_campaignId(const int64_t val)
{
    this->campaignId = val;
}

void Campaign::__set_adSource(const ADSource::type val)
{
    this->adSource = val;
}

void Campaign::__set_adTemplate(const ADTemplate::type val)
{
    this->adTemplate = val;
    __isset.adTemplate = true;
}

void Campaign::__set_imageSizeId(const ImageSizeEnum::type val)
{
    this->imageSizeId = val;
}

const char* Campaign::ascii_fingerprint = "43B1D69C1ED22F18C4BABDF8D696F5BA";
const uint8_t Campaign::binary_fingerprint[16] = {0x43, 0xB1, 0xD6, 0x9C, 0x1E, 0xD2, 0x2F, 0x18, 0xC4, 0xBA, 0xBD, 0xF8, 0xD6, 0x96, 0xF5, 0xBA};

uint32_t Campaign::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    bool isset_campaignId = false;
    bool isset_adSource = false;
    bool isset_imageSizeId = false;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }

        switch (fid) {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_I64) {
                    xfer += iprot->readI64(this->campaignId);
                    isset_campaignId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast47;
                    xfer += iprot->readI32(ecast47);
                    this->adSource = (ADSource::type)ecast47;
                    isset_adSource = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast48;
                    xfer += iprot->readI32(ecast48);
                    this->adTemplate = (ADTemplate::type)ecast48;
                    this->__isset.adTemplate = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast49;
                    xfer += iprot->readI32(ecast49);
                    this->imageSizeId = (ImageSizeEnum::type)ecast49;
                    isset_imageSizeId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    JUDGE(campaignId);


    JUDGE(adSource);


    JUDGE(imageSizeId);


    return xfer;
}

uint32_t Campaign::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("Campaign");

    xfer += oprot->writeFieldBegin("campaignId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->campaignId);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("adSource", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->adSource);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.adTemplate) {
        xfer += oprot->writeFieldBegin("adTemplate", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32((int32_t)this->adTemplate);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldBegin("imageSizeId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->imageSizeId);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(Campaign& a, Campaign& b)
{
    using ::std::swap;
    swap(a.campaignId, b.campaignId);
    swap(a.adSource, b.adSource);
    swap(a.adTemplate, b.adTemplate);
    swap(a.imageSizeId, b.imageSizeId);
    swap(a.__isset, b.__isset);
}

Campaign::Campaign(const Campaign& other50)
{
    campaignId = other50.campaignId;
    adSource = other50.adSource;
    adTemplate = other50.adTemplate;
    imageSizeId = other50.imageSizeId;
    __isset = other50.__isset;
}
Campaign& Campaign::operator=(const Campaign& other51)
{
    campaignId = other51.campaignId;
    adSource = other51.adSource;
    adTemplate = other51.adTemplate;
    imageSizeId = other51.imageSizeId;
    __isset = other51.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const Campaign& obj)
{
    using apache::thrift::to_string;
    out << "Campaign(";
    out << "campaignId=" << to_string(obj.campaignId);
    out << ", " << "adSource=" << to_string(obj.adSource);
    out << ", " << "adTemplate=";
    (obj.__isset.adTemplate ? (out << to_string(obj.adTemplate)) : (out << "<null>"));
    out << ", " << "imageSizeId=" << to_string(obj.imageSizeId);
    out << ")";
    return out;
}


QueryResult::~QueryResult() throw()
{
}


void QueryResult::__set_campaign_list(const std::vector<Campaign>& val)
{
    this->campaign_list = val;
}

void QueryResult::__set_strategy(const std::string& val)
{
    this->strategy = val;
}

void QueryResult::__set_logId(const std::string& val)
{
    this->logId = val;
}

void QueryResult::__set_runTimeField(const RunTimeField& val)
{
    this->runTimeField = val;
    __isset.runTimeField = true;
}

const char* QueryResult::ascii_fingerprint = "623657FAC303C262A346F0E41D6FF239";
const uint8_t QueryResult::binary_fingerprint[16] = {0x62, 0x36, 0x57, 0xFA, 0xC3, 0x03, 0xC2, 0x62, 0xA3, 0x46, 0xF0, 0xE4, 0x1D, 0x6F, 0xF2, 0x39};

uint32_t QueryResult::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    bool isset_campaign_list = false;
    bool isset_strategy = false;
    bool isset_logId = false;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }

        switch (fid) {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_LIST) {
                    {
                        this->campaign_list.clear();
                        uint32_t _size52;
                        ::apache::thrift::protocol::TType _etype55;
                        xfer += iprot->readListBegin(_etype55, _size52);
                        this->campaign_list.resize(_size52);
                        uint32_t _i56;

                        for (_i56 = 0; _i56 < _size52; ++_i56) {
                            xfer += this->campaign_list[_i56].read(iprot);
                        }

                        xfer += iprot->readListEnd();
                    }
                    isset_campaign_list = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->strategy);
                    isset_strategy = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->logId);
                    isset_logId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                    xfer += this->runTimeField.read(iprot);
                    this->__isset.runTimeField = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    JUDGE(campaign_list);


    JUDGE(strategy);


    JUDGE(logId);


    return xfer;
}

uint32_t QueryResult::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("QueryResult");

    xfer += oprot->writeFieldBegin("campaign_list", ::apache::thrift::protocol::T_LIST, 1);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->campaign_list.size()));
        std::vector<Campaign> ::const_iterator _iter57;

        for (_iter57 = this->campaign_list.begin(); _iter57 != this->campaign_list.end(); ++_iter57) {
            xfer += (*_iter57).write(oprot);
        }

        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("strategy", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strategy);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("logId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->logId);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.runTimeField) {
        xfer += oprot->writeFieldBegin("runTimeField", ::apache::thrift::protocol::T_STRUCT, 4);
        xfer += this->runTimeField.write(oprot);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(QueryResult& a, QueryResult& b)
{
    using ::std::swap;
    swap(a.campaign_list, b.campaign_list);
    swap(a.strategy, b.strategy);
    swap(a.logId, b.logId);
    swap(a.runTimeField, b.runTimeField);
    swap(a.__isset, b.__isset);
}

QueryResult::QueryResult(const QueryResult& other58)
{
    campaign_list = other58.campaign_list;
    strategy = other58.strategy;
    logId = other58.logId;
    runTimeField = other58.runTimeField;
    __isset = other58.__isset;
}
QueryResult& QueryResult::operator=(const QueryResult& other59)
{
    campaign_list = other59.campaign_list;
    strategy = other59.strategy;
    logId = other59.logId;
    runTimeField = other59.runTimeField;
    __isset = other59.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryResult& obj)
{
    using apache::thrift::to_string;
    out << "QueryResult(";
    out << "campaign_list=" << to_string(obj.campaign_list);
    out << ", " << "strategy=" << to_string(obj.strategy);
    out << ", " << "logId=" << to_string(obj.logId);
    out << ", " << "runTimeField=";
    (obj.__isset.runTimeField ? (out << to_string(obj.runTimeField)) : (out << "<null>"));
    out << ")";
    return out;
}


QueryFailureException::~QueryFailureException() throw()
{
}


void QueryFailureException::__set_message(const std::string& val)
{
    this->message = val;
}

void QueryFailureException::__set_errorCode(const ErrorCode::type val)
{
    this->errorCode = val;
}

void QueryFailureException::__set_requestId(const std::string& val)
{
    this->requestId = val;
}

const char* QueryFailureException::ascii_fingerprint = "D9F4CFE2F293A8B1052FD3031DD2C847";
const uint8_t QueryFailureException::binary_fingerprint[16] = {0xD9, 0xF4, 0xCF, 0xE2, 0xF2, 0x93, 0xA8, 0xB1, 0x05, 0x2F, 0xD3, 0x03, 0x1D, 0xD2, 0xC8, 0x47};

uint32_t QueryFailureException::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }

        switch (fid) {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->message);
                    this->__isset.message = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I32) {
                    int32_t ecast60;
                    xfer += iprot->readI32(ecast60);
                    this->errorCode = (ErrorCode::type)ecast60;
                    this->__isset.errorCode = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_STRING) {
                    xfer += iprot->readString(this->requestId);
                    this->__isset.requestId = true;
                } else {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t QueryFailureException::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("QueryFailureException");

    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->errorCode);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->requestId);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(QueryFailureException& a, QueryFailureException& b)
{
    using ::std::swap;
    swap(a.message, b.message);
    swap(a.errorCode, b.errorCode);
    swap(a.requestId, b.requestId);
    swap(a.__isset, b.__isset);
}

QueryFailureException::QueryFailureException(const QueryFailureException& other61) : TException()
{
    message = other61.message;
    errorCode = other61.errorCode;
    requestId = other61.requestId;
    __isset = other61.__isset;
}
QueryFailureException& QueryFailureException::operator=(const QueryFailureException& other62)
{
    message = other62.message;
    errorCode = other62.errorCode;
    requestId = other62.requestId;
    __isset = other62.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryFailureException& obj)
{
    using apache::thrift::to_string;
    out << "QueryFailureException(";
    out << "message=" << to_string(obj.message);
    out << ", " << "errorCode=" << to_string(obj.errorCode);
    out << ", " << "requestId=" << to_string(obj.requestId);
    out << ")";
    return out;
}

} // namespace
